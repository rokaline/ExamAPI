<!-- page Departments.razor-->
@page "/departments"

@using System.Text.Json
@using System.Net.Http
@inject HttpClient client
@using MetropolitanMuseum.Convertisseur <!-- Convertisseur.cs -->
@inject NavigationManager NavigationManager

@inject IJSRuntime JS


<script src="../js/photoDept.js"></script>

<!-- Affichage des données de l'API (départements + photos  ac possibilités de choisir le favori : 1/2/3) -->
@if (apiResponse != null && apiResponse.Departments != null)
{
    <h3>Départments</h3>
    <ul>
        @foreach (var department in apiResponse.Departments)
        {
            <li>
                <div>
                    @($"{department.DisplayName} ")

                    <img src="img/@($"{department.DepartmentId}.jpg")" alt="Image pour le DepartmentId {department.DepartmentId} ">

                    <select @onchange="@(e => AddToFavorite(e, department.DisplayName, $"{department.DepartmentId}.jpg") )" class="favoriteButton">
                        <option value="0">Sélectionner 1 , 2  ou  3</option>
                        <option value="1">1: Déjà vu</option>
                        <option value="2">2: Prochaine visite</option>
                        <option value="3">3: Visite à prévoir</option>
                    </select>
                </div>
            </li>
        }
    </ul>
}
else
{
    <p>Chargement des données...</p>
}

@if (FavoritesManager.Instance.HasFavorites())
{
    // bouton confirmation choix favoris
    <button @onclick="ConfirmChoices">Confirmer mon choix</button>
}

@code {

    // Déclaration d'une variable pour stocker la réponse de l'API
    private DepartmentContainer apiResponse;

    // Méthode appelée lors de l'initialisation de la page
    protected override async Task OnInitializedAsync()
    {
        // Appel de la méthode GetData pour récupérer les données de l'API
        await GetData();
    }

    // A)Méthode pour récupérer les données de l'API
    public async Task GetData()
    {
        try
        {
            // Appel asynchrone à l'API pour obtenir une chaîne JSON représentant les données
            var responseString = await client.GetStringAsync("https://collectionapi.metmuseum.org/public/collection/v1/departments");

            // Désérialisation de la chaîne JSON en un objet ApiResponse
            apiResponse = JsonSerializer.Deserialize<DepartmentContainer>(responseString);
        }
        catch (Exception ex)
        {
            // Gestion des erreurs lors de la récupération des données
            Console.WriteLine($"Une erreur est survenue lors de la récupération des données : {ex.Message}");
        }
    }

    private async Task AddToFavorite(ChangeEventArgs e, string departmentName, string photoUrl)
    {
        int choice = Convert.ToInt32(e.Value);
        DepartmentFavorite favorite = new DepartmentFavorite
            {
                DepartmentName = departmentName,
                PhotoUrl = photoUrl,
                Category = choice

            };
        FavoritesManager.Instance.AddFavorite(choice, favorite);

    }







    private async Task ConfirmChoices()
    {
        // methode qui enregistre le choix (1 ou 2 ou 3) et renvoie l'affichage  vers Favorites.razor.
        Dictionary<int, List<DepartmentFavorite>> fav = FavoritesManager.Instance.GetSaveFav(); //récupèrtion des fav dans un objet
        var save = JsonSerializer.Serialize(fav); //serialisation de cet objet en json
        await JS.InvokeVoidAsync("localStorage.setItem", "myfavs", save); //ajout du json dans le local storage avec la clef myfavs => set pour mettre dans le local storage

        // Rediriger vers la page "Favorites"
        NavigationManager.NavigateTo("/favorites");
    }
    
}
