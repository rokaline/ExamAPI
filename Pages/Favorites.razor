<!-- page Favorites.razor -->
@page "/favorites"

@using System.Text.Json
@using System.Net.Http
@inject HttpClient client
@inject IJSRuntime JSRuntime
@using MetropolitanMuseum.Convertisseur <!-- Convertisseur.cs -->

<h1>Espace Favoris</h1>


<h3>Déjà vu</h3>
@foreach (var favorite in FavoritesManager.Instance.GetFavorites(1))
{
    <div class="visitFav">
        @favorite.DepartmentName
        <img src="@favorite.PhotoUrl" alt="Image du département @favorite.DepartmentName"><br />

        <input type="text" name="description" id="description" minlength="5" maxlength="300" required><br />
        <!--<button class="commentButton">Ajout commentaire</button>-->

        <button class="deleteButton" @onclick="() => DeleteFavorite(1, favorite)">Supprimer des favoris</button>
    </div>
}




<h3>Prochaine visite</h3>
@foreach (var favorite in FavoritesManager.Instance.GetFavorites(2))
{
    <div class="visitFav">
        @favorite.DepartmentName
        <img src="@favorite.PhotoUrl" alt="Image du département @favorite.DepartmentName"><br />

        <input type="text" name="description" id="description" minlength="5" maxlength="300" required><br />
        <!--<button class="commentButton">Ajout commentaire</button>-->
     

        <button class="deleteButton" @onclick="() => DeleteFavorite(2, favorite)">Supprimer des favoris</button>
    </div>
}



<h3>Visite à prévoir</h3>
@foreach (var favorite in FavoritesManager.Instance.GetFavorites(3))
{
    <div class="visitFav">
        @favorite.DepartmentName
        <img src="@favorite.PhotoUrl" alt="Image du département @favorite.DepartmentName"><br />

        <input type="text" name="description" id="description" minlength="5" maxlength="300" required><br />
        <!--<button class="commentButton">Ajout commentaire</button>-->

        <button class="deleteButton" @onclick="() => DeleteFavorite(3, favorite)">Supprimer des favoris</button>
    </div>
}



@code {
    private Dictionary<int, List<DepartmentFavorite>> favoritesByCategory = new Dictionary<int, List<DepartmentFavorite>>();

    protected override void OnInitialized()
    {
        favoritesByCategory[1] = FavoritesManager.Instance.GetFavorites(1);
        favoritesByCategory[2] = FavoritesManager.Instance.GetFavorites(2);
        favoritesByCategory[3] = FavoritesManager.Instance.GetFavorites(3);
    }

    private void DeleteFavorite(int category, DepartmentFavorite favorite)
    {
        if (favoritesByCategory.ContainsKey(category))
        {
            // Supprimez l'élément de la liste des favoris de la catégorie spécifiée
            favoritesByCategory[category].Remove(favorite);
        }
    }


    //partie pour la sauvegarde
    private async Task SaveFavorites()
    {
        var favoritesJson = JsonSerializer.Serialize(favoritesByCategory);

        // Stockage des favoris dans le stockage local du navigateur
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "favorites", favoritesJson);
        
    }

}
